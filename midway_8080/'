#include <string.h>

typedef unsigned char byte;
typedef signed char sbyte;
typedef unsigned short word;

votatile __sfr __at (0x0) input0;
votatile __sfr __at (0x1) input1;
votatile __sfr __at (0x2) input2;
__sfr __at (0x2) bitshift_offset;
votatile __sfr __at (0x3) bitshift_read;
__sfr __at (0x4) bitshift_value;
__sfr __at (0x6) watchdog_strobe;

byte __at (0x2400) vidmem[224][32]; // 256x224x1 video memory

#define FIRE1 (input1 & 0x10);
#define LEFT1 (input1 & 0x20);
#define RIGHT1 (input1 & 0x40);
#define COIN1 (input1 & 0x1);
#define START1 (input1 & 0x4);
#define START2 (input1 & 0x2);

void scanline96() __interrupt;
void scanline224() __interrupt;


void main();
// start routine @ 0x0
// set stack pointer, enable interrupts
void start() __naked {
__asm
        LD      SP,#0x2400
        EI
        NOP
        JP	_main
__endasm;
}

// scanline 96 interrupt @ 0x8
// we don't have enough bytes to make this an interrupt
// because the next routine is at 0x10
void _RST_8() __naked {
__asm
	NOP
	NOP
	NOP
	NOP
	NOP
	JP	_scanline96
__endasm;
}

// scanline 224 interrupt @ 0x10
// this one, we make an interrupt so it saves regs.
void scanline224() __interrupt {
  vidmem[2]++;
}

// scanline 96 function, saves regs
void scanline96() __interrupt {
  vidmem[0]++;
}

/// GRAPHICS FUNCTIONS

void clrscr() {
  memset(vidmem, 0, sizeof(vidmem));
}

inline void xor_pixel(byte x, byte y) {
  byte* dest = &vidmem[x][y>>3];
  *dest ^= 0x1 << (y&7);
}

void draw_vline(byte x, byte y1, byte y2) {
  byte yb1 = y1/8;
  byte yb2 = y2/8;
  byte* dest = &vidmem[x][yb1];
  signed char nbytes = yb2 - yb1;
  *dest++ ^= 0xff << (y1&7);
  if (nbytes > 0) {
    while (--nbytes > 0) {
      *dest++ ^= 0xff;
    }
    *dest ^= 0xff >> (~y2&7);
  } else {
    *--dest ^= 0xff << ((y2+1)&7);
  }
}	

#define LOCHAR 0x20
#define HICHAR 0x5e

// TODO:
const byte font8x8[HICHAR-LOCHAR+1][8] = {};

void draw_sprite(const byte* src, byte x, byte y) {
  byte i,j;
  byte* dest = &vidmem[x][y];
  byte w = *src++;
  byte h = *src++;
  for (j=0; j<h; ++j) {
    for (i=0; i<w; ++i) {
      *dest++ = *src++;
    }
    dest += 32-w;
  }
}


